/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SupportImport } from './routes/support'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PricingImport } from './routes/pricing'
import { Route as OfferingsImport } from './routes/offerings'
import { Route as DemoImport } from './routes/demo'
import { Route as CompanyImport } from './routes/company'
import { Route as AccessibilityImport } from './routes/accessibility'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SupportRoute = SupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const OfferingsRoute = OfferingsImport.update({
  id: '/offerings',
  path: '/offerings',
  getParentRoute: () => rootRoute,
} as any)

const DemoRoute = DemoImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRoute,
} as any)

const CompanyRoute = CompanyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRoute,
} as any)

const AccessibilityRoute = AccessibilityImport.update({
  id: '/accessibility',
  path: '/accessibility',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/accessibility': {
      id: '/accessibility'
      path: '/accessibility'
      fullPath: '/accessibility'
      preLoaderRoute: typeof AccessibilityImport
      parentRoute: typeof rootRoute
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyImport
      parentRoute: typeof rootRoute
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoImport
      parentRoute: typeof rootRoute
    }
    '/offerings': {
      id: '/offerings'
      path: '/offerings'
      fullPath: '/offerings'
      preLoaderRoute: typeof OfferingsImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accessibility': typeof AccessibilityRoute
  '/company': typeof CompanyRoute
  '/demo': typeof DemoRoute
  '/offerings': typeof OfferingsRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accessibility': typeof AccessibilityRoute
  '/company': typeof CompanyRoute
  '/demo': typeof DemoRoute
  '/offerings': typeof OfferingsRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/accessibility': typeof AccessibilityRoute
  '/company': typeof CompanyRoute
  '/demo': typeof DemoRoute
  '/offerings': typeof OfferingsRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/support': typeof SupportRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accessibility'
    | '/company'
    | '/demo'
    | '/offerings'
    | '/pricing'
    | '/privacy'
    | '/support'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/accessibility'
    | '/company'
    | '/demo'
    | '/offerings'
    | '/pricing'
    | '/privacy'
    | '/support'
  id:
    | '__root__'
    | '/'
    | '/accessibility'
    | '/company'
    | '/demo'
    | '/offerings'
    | '/pricing'
    | '/privacy'
    | '/support'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccessibilityRoute: typeof AccessibilityRoute
  CompanyRoute: typeof CompanyRoute
  DemoRoute: typeof DemoRoute
  OfferingsRoute: typeof OfferingsRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  SupportRoute: typeof SupportRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccessibilityRoute: AccessibilityRoute,
  CompanyRoute: CompanyRoute,
  DemoRoute: DemoRoute,
  OfferingsRoute: OfferingsRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  SupportRoute: SupportRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accessibility",
        "/company",
        "/demo",
        "/offerings",
        "/pricing",
        "/privacy",
        "/support"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accessibility": {
      "filePath": "accessibility.tsx"
    },
    "/company": {
      "filePath": "company.tsx"
    },
    "/demo": {
      "filePath": "demo.tsx"
    },
    "/offerings": {
      "filePath": "offerings.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/support": {
      "filePath": "support.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
